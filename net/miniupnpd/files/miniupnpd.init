#!/bin/sh /etc/rc.common
# Copyright (C) 2006-2014 OpenWrt.org

START=94
STOP=15
USE_PROCD=1
PROG=/usr/sbin/miniupnpd
[ -x "$(command -v nft)" ] && FW="fw4" || FW="fw3"

uci_migration() {
	echo "/etc/config/upnpd: Check UCI options to be migrated ..."

	# Remove known incompatible STUN servers and include stun_port in stun_host
	if uci -q get upnpd.config.stun_host | grep -q -E "stun[0-9]?.l.google.com|stun.cloudflare.com"; then
		echo "- stun_host: Incompatible STUN server found, remove to set compatible default"
		uci -q delete upnpd.config.stun_host
		uci -q delete upnpd.config.stun_port
	elif uci -q get upnpd.config.stun_host >/dev/null && uci -q get upnpd.config.stun_port >/dev/null; then
		if [ "$(uci -q get upnpd.config.stun_port)" != "3478" ]; then
			echo "- stun_port: Include stun_port in stun_host, and remove old option"
			uci -q set upnpd.config.stun_host="$(uci -q get upnpd.config.stun_host | cut -d ":" -f 1):$(uci -q get upnpd.config.stun_port)"
		fi
		uci -q delete upnpd.config.stun_port
	fi

	# Migrate old options from OpenWrt 19.07 and X-Wrt for CGNAT use
	if uci -q get upnpd.config.ext_ip_reserved_ignore >/dev/null ||
	uci -q get upnpd.config.force_forwarding >/dev/null; then
		echo "- Migrate old options from OpenWrt 19.07 and X-Wrt for CGNAT use"
		if [ "$(uci -q get upnpd.config.ext_ip_reserved_ignore)" = "1" ] || [ "$(uci -q get upnpd.config.force_forwarding)" = "1" ]; then
			uci -q set upnpd.config.use_stun="allow-filtered"
		fi
		uci -q delete upnpd.config.ext_ip_reserved_ignore
		uci -q delete upnpd.config.force_forwarding
	fi

	# Migrate secure_mode=1 -> allow_third_party_mapping=0: Invert/extend to PCP
	if uci -q get upnpd.config.secure_mode >/dev/null; then
		echo "- secure_mode=1 -> allow_third_party_mapping=0: Invert/extend to PCP"
		if [ "$(uci -q get upnpd.config.secure_mode)" = "0" ]; then
			uci -q set upnpd.config.allow_third_party_mapping="1"
		else
			uci -q set upnpd.config.allow_third_party_mapping="0"
		fi
		uci -q delete upnpd.config.secure_mode
	fi

	# Migrate download/upload -> download_kbps/upload_kbps: Change to kbit/s
	if uci -q get upnpd.config.download >/dev/null || uci -q get upnpd.config.upload >/dev/null; then
		download="$(uci -q get upnpd.config.download || echo 1024)"
		if [ "$download" != "1024" ]; then
			echo "- download -> download_kbps: Change to kbit/s"
			download_kbps="$((download * 8 * 1000 / 1024))"
			uci -q set upnpd.config.download_kbps="$download_kbps"
		fi
		upload="$(uci -q get upnpd.config.upload || echo 512)"
		if [ "$upload" != "512" ]; then
			echo "- upload -> upload_kbps: Change to kbit/s"
			upload_kbps="$((upload * 8 * 1000 / 1024))"
			uci -q set upnpd.config.upload_kbps="$upload_kbps"
		fi
		uci -q delete upnpd.config.download
		uci -q delete upnpd.config.upload
	fi

	# Migrate igdv1=1 -> upnp_igd_compat=igdv1: Extensible/clearer
	if uci -q get upnpd.config.igdv1 >/dev/null; then
		echo "- igdv1=1 -> upnp_igd_compat=igdv1"
		if [ "$(uci -q get upnpd.config.igdv1)" = "1" ]; then
			uci -q set upnpd.config.upnp_igd_compat="igdv1"
		else
			uci -q set upnpd.config.upnp_igd_compat="igdv2"
		fi
		uci -q delete upnpd.config.igdv1
	fi

	# Migrate enable_natpmp -> enable_pcp_natpmp: As PCP is supported
	if uci -q get upnpd.config.enable_natpmp >/dev/null; then
		echo "- enable_natpmp -> enable_pcp_natpmp"
		uci -q rename upnpd.config.enable_natpmp="enable_pcp_natpmp"
	fi

	# Migrate notify_interval <900s: Remove to set minimum of 900 (default)
	[ "$(uci -q get upnpd.config.notify_interval)" ] && [ "$(uci -q get upnpd.config.notify_interval)" -le "900" ] &&
	uci -q delete upnpd.config.notify_interval &&
	echo "- notify_interval <900s: Remove to set minimum of 900 (default)"

	# Migrate port and upnp_lease_file: Remove if default for a more compact config
	[ "$(uci -q get upnpd.config.port)" = "5000" ] && uci -q delete upnpd.config.port &&
	echo "- port: Remove option as default value is set"
	[ "$(uci -q get upnpd.config.upnp_lease_file)" = "/var/run/miniupnpd.leases" ] && uci -q delete upnpd.config.upnp_lease_file &&
	echo "- upnp_lease_file: Remove option as default value is set"

	# Update ACL comment to deny by default with no entry
	if [ "$(uci -q get upnpd.@perm_rule[0].action)" = "allow" ] &&
	[ "$(uci -q get upnpd.@perm_rule[0].int_addr)" = "0.0.0.0/0" ] &&
	[ "$(uci -q get upnpd.@perm_rule[0].int_ports)" = "1024-65535" ] &&
	[ "$(uci -q get upnpd.@perm_rule[0].ext_ports)" = "1024-65535" ] &&
	[ "$(uci -q get upnpd.@perm_rule[1].action)" = "deny" ] &&
	[ "$(uci -q get upnpd.@perm_rule[1].int_addr)" = "0.0.0.0/0" ] &&
	[ "$(uci -q get upnpd.@perm_rule[1].int_ports)" = "0-65535" ] &&
	[ "$(uci -q get upnpd.@perm_rule[1].ext_ports)" = "0-65535" ] &&
	[ "$(uci -q get upnpd.@perm_rule[2])" != "perm_rule" ] ||
	[ "$(uci -q get upnpd.@perm_rule[0])" != "perm_rule" ]; then
		echo "- Update ACL comment to deny by default with no entry"
		# If empty ACL, create default? (for discussion)
		[ "$(uci -q get upnpd.@perm_rule[0])" != "perm_rule" ] && uci -q add upnpd perm_rule && uci -q add upnpd perm_rule
		uci -q batch <<-EOF
				set upnpd.@perm_rule[0]=perm_rule
				set upnpd.@perm_rule[0].comment='Allow high ports'
				set upnpd.@perm_rule[0].int_addr='0.0.0.0/0'
				set upnpd.@perm_rule[0].int_ports='1024-65535'
				set upnpd.@perm_rule[0].ext_ports='1024-65535'
				set upnpd.@perm_rule[0].action='allow'
				set upnpd.@perm_rule[1]=perm_rule
				set upnpd.@perm_rule[1].comment='All ports'
				set upnpd.@perm_rule[1].int_addr='0.0.0.0/0'
				set upnpd.@perm_rule[1].int_ports='1-65535'
				set upnpd.@perm_rule[1].ext_ports='1-65535'
				set upnpd.@perm_rule[1].action='deny'
			EOF
	fi
	uci -q commit upnpd
}

upnpd_get_port_range() {
	local var="$1"; shift
	local val

	config_get val "$@"

	case "$val" in
		[0-9]*[:-][0-9]*)
			export -n -- "${var}_start=${val%%[:-]*}"
			export -n -- "${var}_end=${val##*[:-]}"
		;;
		[0-9]*)
			export -n -- "${var}_start=$val"
			export -n -- "${var}_end="
		;;
	esac
}

conf_rule_add() {
	local cfg="$1"
	local action int_addr
	local ext_start ext_end int_start int_end comment

	config_get action "$cfg" action "deny"                # allow or deny
	upnpd_get_port_range "ext" "$cfg" ext_ports "1-65535" # external ports: x, x-y, x:y
	config_get int_addr "$cfg" int_addr "0.0.0.0/0"       # ip or network and subnet mask (internal)
	upnpd_get_port_range "int" "$cfg" int_ports "1-65535" # internal ports: x, x-y, x:y or range
	config_get comment "$cfg" comment "Unnamed ACL entry"		      # comment

	echo "$action $ext_start${ext_end:+-}$ext_end $int_addr $int_start${int_end:+-}$int_end # $comment"
}

echo_yesno() {
	[ "$1" -eq "1" ] && echo yes || echo no
}

echo_yesno_inverse() {
	[ "$1" -eq "1" ] && echo no || echo yes
}

upnpd_write_bool() {
	local opt="$1"
	local def="${2:-0}"
	local alt="${3:-$opt}"
	local val

	config_get_bool val config "$opt" "$def"
	if [ "$val" -eq 0 ]; then
		echo "$alt=no"
	else
		echo "$alt=yes"
	fi
}

upnpd() {
	config_load "upnpd"
	local external_iface external_iface6 external_zone external_ip internal_iface
	local upload_kbps download_kbps log_output port config_file serial_number model_number
	local use_stun stun_host stun_port uuid notify_interval presentation_url
	local upnp_lease_file ipv6_disable

	local enabled
	config_get_bool enabled config enabled 0
	[ "$enabled" -eq 0 ] && return 1

	config_get external_iface config external_iface
	config_get external_iface6 config external_iface6
	config_get external_zone config external_zone
	config_get external_ip config external_ip
	config_get internal_iface config internal_iface
	config_get port config port 5000
	config_get upload_kbps config upload_kbps
	config_get download_kbps config download_kbps
	config_get_bool log_output config log_output 0
	config_get config_file config config_file
	config_get serial_number config serial_number
	config_get model_number config model_number
	config_get uuid config uuid
	config_get use_stun config use_stun 0
	config_get stun_host config stun_host stun.nextcloud.com
	config_get stun_port config stun_port
	config_get notify_interval config notify_interval
	config_get presentation_url config presentation_url
	config_get upnp_lease_file config upnp_lease_file /var/run/miniupnpd.leases
	config_get ipv6_disable config ipv6_disable 0
	config_get_bool allow_third_party_mapping config allow_third_party_mapping 0
	config_get upnp_igd_compat config upnp_igd_compat igdv1

	local conf ifname ifname6

	. /lib/functions/network.sh

	if [ -n "$external_iface" ] ; then
		network_get_device ifname "$external_iface"
	else
		if [ -n "$external_zone" ] ; then
			ifname=$($FW -q zone "$external_zone" 2>/dev/null | head -1)
		else
			network_find_wan external_iface && \
				network_get_device ifname "$external_iface"
		fi
	fi
	if [ -n "$external_iface6" ] ; then
		network_get_device ifname6 "$external_iface6"
	else
		if [ -n "$external_zone" ] ; then
			ifname6=$($FW -q zone "$external_zone" 2>/dev/null | head -1)
		else
			network_find_wan6 external_iface6 && \
				network_get_device ifname6 "$external_iface6"
		fi
	fi

	if [ -n "$config_file" ]; then
		conf="$config_file"
	else
		local tmpconf="/var/etc/miniupnpd.conf"
		conf="$tmpconf"
		mkdir -p /var/etc

		{
		echo "ext_ifname=$ifname"
		echo "ext_ifname6=$ifname6"
		[ -n "$external_ip" ] && echo "ext_ip=$external_ip"

		local iface
		for iface in ${internal_iface:-lan}; do
			local device
			network_get_device device "$iface" && echo "listening_ip=$device"
		done

		config_load "upnpd"
		upnpd_write_bool enable_pcp_natpmp 1 enable_pcp_pmp
		upnpd_write_bool enable_upnp 1
		echo "secure_mode=$(echo_yesno_inverse $allow_third_party_mapping)"
		echo "pcp_allow_thirdparty=$(echo_yesno $allow_third_party_mapping)"
		if [ "$upnp_igd_compat" = "igdv1" ]; then
			echo "force_igd_desc_v1=yes"
		else
			echo "force_igd_desc_v1=no"
		fi
		upnpd_write_bool system_uptime 1
		upnpd_write_bool ipv6_disable $ipv6_disable

		[ "$use_stun" = "0" ] || {
			[ "$use_stun" = "1" ] && echo "ext_perform_stun=yes"
			[ "$use_stun" = "allow-filtered" ] && echo "ext_perform_stun=allow-filtered"
			[ -n "$stun_host" ] && echo "ext_stun_host=$(echo $stun_host | cut -d ":" -f 1)" &&
			[ "$(echo $stun_host | cut -s -d ":" -f 2)" != "" ] && echo "ext_stun_port=$(echo $stun_host | cut -s -d ":" -f 2)"
		}

		[ -n "$download_kbps" ] && echo "bitrate_down=$((download_kbps * 1000))"
		[ -n "$upload_kbps" ] && echo "bitrate_up=$((upload_kbps * 1000))"

		[ -n "$upnp_lease_file" ] && touch "$upnp_lease_file" && echo "lease_file=$upnp_lease_file"
		[ -n "$presentation_url" ] && echo "presentation_url=$presentation_url"
		[ -n "$notify_interval" ] && echo "notify_interval=$notify_interval"
		[ -n "$serial_number" ] && echo "serial=$serial_number"
		[ -n "$model_number" ] && echo "model_number=$model_number"
		[ -n "$port" ] && echo "port=$port"

		[ -z "$uuid" ] && {
			uuid="$(cat /proc/sys/kernel/random/uuid)"
			uci set upnpd.config.uuid="$uuid"
			uci commit upnpd
		}

		[ "$uuid" = "nocli" ] || echo "uuid=$uuid"

		if [ "$FW" = "fw4" ]; then
			#When using nftables configure miniupnpd to use its own table and chains
			echo "upnp_table_name=fw4"
			echo "upnp_nat_table_name=fw4"
			echo "upnp_forward_chain=upnp_forward"
			echo "upnp_nat_chain=upnp_prerouting"
			echo "upnp_nat_postrouting_chain=upnp_postrouting"
		fi

		printf "\n%s\n" "# Access Control List (ACL)"
		config_foreach conf_rule_add perm_rule
		echo "deny 1-65535 0.0.0.0/0 1-65535 # Deny ACL by default"

		} > "$tmpconf"
	fi

	if [ -n "$ifname" ]; then
		# start firewall
		if [ "$FW" = "fw4" ]; then
			nft -s -t -n list chain inet fw4 upnp_forward >/dev/null 2>&1 || fw4 reload
		else
			iptables -L MINIUPNPD >/dev/null 2>&1 || fw3 reload
		fi
	else
		logger -t "upnp daemon" "external interface not found, not starting"
	fi

	procd_open_instance
	procd_set_param file "$conf" "/etc/config/firewall"
	procd_set_param command "$PROG"
	procd_append_param command -f "$conf"
	[ "$log_output" = "1" ] && procd_append_param command -d
	procd_close_instance
}

stop_service() {
	if [ "$FW" = "fw3" ]; then
		iptables -t nat -F MINIUPNPD 2>/dev/null
		iptables -t nat -F MINIUPNPD-POSTROUTING 2>/dev/null
		iptables -t filter -F MINIUPNPD 2>/dev/null
		[ -x /usr/sbin/ip6tables ] && ip6tables -t filter -F MINIUPNPD 2>/dev/null
	else
		nft flush chain inet fw4 upnp_forward 2>/dev/null
		nft flush chain inet fw4 upnp_prerouting 2>/dev/null
		nft flush chain inet fw4 upnp_postrouting 2>/dev/null
	fi
}

start_service() {
	uci_migration
	config_load "upnpd"
	config_foreach upnpd "upnpd"
}

service_triggers() {
	procd_add_reload_trigger "upnpd"
}
